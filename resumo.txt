NodeJS
-> O que é?
Permite que o JS rode no lado do servidor tratando requisições e respostas 
através de API e outros.

-> API Rest 
Fornece uma interface de backend para atendar a diversos clientes
como web, mobile e desktop. 

-> Criar estrutura do projeto
npm init -y

-> Instalar express
npm install express 

-> O que é express?
Micro-framework que vai ajudar a trabalhar com rotas e views 

-> package.json e package-lock.json
package.json é o arquivo que conta com informações do projeto e também
o que é muito importante, suas dependências. 
package-lock.json é um arquivo de cache para o nodejs saber quais pacotes estão 
instalados e de modo a manter um controle de dependência comum 

-> node_modules
Armazena as dependências do projeto

-> Criar arquivo principal
server.js

-> Instalar nodemon
npm install nodemon -D

-> O que é nodemon?
Utilizado para fazer auto reload da aplicação após realizar 
qualquer mudança sem precisar restartar o servidor de forma manual usando
node server.js 

-> Como utilizar o nodemon?
Através de um script no arquivo package.json
// package.json 
scripts:
 "dev": "nodemon server.js"
// terminal
npm run dev 

-> Instalando MongoDB através do Docker
Após intalação
// terminal
sudo docker pull mongo
sudo docker run --name mongodb -p 27017:27017 mongo
sudo docker ps 

-> Instalar mongoose 
npm install mongoose

-> O que é mongoose?
ORM (encapsula a lógica das operações do banco de dados) de bancos não relacionais com MongoDB. 
Utiliza códigos Javascript para realizar as operações em banco, sem precisar utilizar
os comandos nativos do banco. 

-> Como o mongoose e a lógica de persistência em banco funcionam?
Para se trabalhar com o banco é necessário criar os Schemas que representam
as tabelas do banco. Para isso, foi necessário criar uma pasta chamada src que conterá
códigos internos da aplicação, e em seguida criar uma pasta chamada models, que irá conter 
os modelos da aplicação. 
Para cada modelo, é necessário criar um arquivo js: nomeModelo.js, 
o arquivo .js irá conter as especificações e propriedades de campo
da tabela. 
Para se fazer uso do modelo, basta apenas importar o arquivo .js, a persistência
ocorre com o uso de funções do mongoose.

-> Instalar require-dir 
Gerencia todos os models e ajuda a importar models. Últil quando 
existem vários models na aplicação e para não importar cada um, utiliza
uma importação que mapeia todos os models e os deixa disponíveis através
de apenas uma importação.

